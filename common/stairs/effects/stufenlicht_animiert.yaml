# Beim animierten Effekt wird jede Stufe einzeln in einer Zufalls-Farbe eingeschaltet.  (Laufrichtung von Stripe-Start nach Stripe-Ende)
# Sobald alle Stufen aktiv sind, wird bei der ersten Stufe wieder mit einer neuen Zufalls-Farbe angefangen.
- addressable_lambda:
    name: "Stufenlicht rauf animiert"
    update_interval: ${schritt_intervall}ms
    lambda: |-
      static int last_reset = 0;
      int von = 0;
      static std::vector<bool> stufen_beleuchtet;

      if (stufen_beleuchtet.empty() || initial_run) {
        stufen_beleuchtet = std::vector<bool>(id(stufen_anzahl), false);
      }

      if (last_reset == 0 || (millis() - last_reset) >= (id(stufen_anzahl) * id(schritt_intervall))) {
        last_reset = millis();
      }

      uint16_t progress = ((millis() - last_reset) / id(schritt_intervall)) % id(stufen_anzahl);

      for (int stufe = 0; stufe < id(stufen_anzahl); stufe++) {
        if (stufe == progress && !stufen_beleuchtet[stufe]) {
          stufen_beleuchtet[stufe] = true;
          it.range(von, von + id(led_stufen)[stufe]) = Color::random_color();
          ESP_LOGI("Stufenlicht", "Stufe %d beleuchtet", progress);
        }
        von += id(led_stufen)[stufe];
      }

      if (std::all_of(stufen_beleuchtet.begin(), stufen_beleuchtet.end(), [](bool b){ return b; })) {
        stufen_beleuchtet.clear();
      }

# Beim animierten Effekt wird jede Stufe einzeln in einer Zufalls-Farbe eingeschaltet.  (Laufrichtung von Stripe-Ende nach Stripe-Start)
# Sobald alle Stufen aktiv sind, wird bei der ersten Stufe wieder mit einer neuen Zufalls-Farbe angefangen.
- addressable_lambda:
    name: "Stufenlicht runter animiert"
    update_interval: ${schritt_intervall}ms
    lambda: |-
      static int last_reset = 0;
      int von = 0;
      static std::vector<bool> stufen_beleuchtet;

      if (stufen_beleuchtet.empty() || initial_run) {
        stufen_beleuchtet = std::vector<bool>(id(stufen_anzahl), false);
      }

      if (last_reset == 0 || (millis() - last_reset) >= (id(stufen_anzahl) * id(schritt_intervall))) {
        last_reset = millis();
      }

      int16_t progress = id(stufen_anzahl) - 1 - (((millis() - last_reset) / id(schritt_intervall)) % (id(stufen_anzahl) + 1));

      for (int stufe = 0; stufe < id(stufen_anzahl); stufe++) {
        if (stufe == progress && !stufen_beleuchtet[stufe]) {
          stufen_beleuchtet[stufe] = true;
          it.range(von, von + id(led_stufen)[stufe]) = Color::random_color();
          ESP_LOGI("Stufenlicht", "Stufe %d beleuchtet", progress);
        }
        von += id(led_stufen)[stufe];
      }

      if (std::all_of(stufen_beleuchtet.begin(), stufen_beleuchtet.end(), [](bool b){ return b; })) {
        stufen_beleuchtet.clear();
      }
